Dossier : sandbox
Fichiers : sandbox.c
Fonctions autorisées :fork, waitpid, exit, alarm, sigaction, kill, printf, strsignal, errno, sigaddset, sigemptyset, sigfillset, sigdelset, sigismember

Écrire la fonction suivante :
#include <stdbool.h>
int sandbox(void (*f)(void), unsigned int timeout, bool verbose);

Cette fonction doit tester si la fonction f est une "bonne fonction" ou une "mauvaise fonction". Vous devez retourner :

1 si f est bonne
0 si f est mauvaise
-1 en cas d'erreur dans votre fonction

Critères d'une mauvaise fonction
Une fonction est considérée comme mauvaise si :

Elle est terminée ou stoppée par un signal (segfault, abort, etc.)
Elle se termine avec un code de sortie différent de 0
Elle dépasse le délai d'attente (timeout)

Mode verbose
Si verbose est true, vous devez afficher le message approprié parmi les suivants :

"Nice function!\n" — si la fonction s'exécute correctement
"Bad function: exited with code <exit_code>\n" — si la fonction se termine avec un code différent de 0
"Bad function: <signal description>\n" — si la fonction est terminée par un signal (utilisez strsignal pour obtenir la description)
"Bad function: timed out after <timeout> seconds\n" — si la fonction dépasse le délai

Contraintes importantes

Vous ne devez pas avoir de fuites de processus (même à l'état zombie, cela sera vérifié avec wait)
Votre code sera testé avec des fonctions très problématiques

Stratégie de résolution

Utilisez fork() pour créer un processus enfant qui exécutera f()
Dans le processus parent, utilisez alarm() pour gérer le timeout
Utilisez waitpid() pour récupérer le statut de terminaison de l'enfant
Analysez le statut avec les macros WIFEXITED, WEXITSTATUS, WIFSIGNALED, WTERMSIG
Si timeout, utilisez kill() pour terminer le processus enfant
Assurez-vous de toujours récupérer le processus enfant pour éviter les zombies
